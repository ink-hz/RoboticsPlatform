version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:14-alpine
    container_name: mvp-postgres
    environment:
      POSTGRES_DB: mvpdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mvp-net

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: mvp-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mvp-net

  # Kafka (单节点版本)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mvp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mvp-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mvp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - mvp-net

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: mvp-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - mvp-net

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mvp-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - mvp-net

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mvp-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mvp-net

  # Node Exporter (系统监控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mvp-node-exporter
    ports:
      - "9100:9100"
    networks:
      - mvp-net

  # Elasticsearch (用于日志)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: mvp-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - mvp-net

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: mvp-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
    volumes:
      - ./configs/kong.yml:/kong/declarative/kong.yml
    networks:
      - mvp-net

  # 认证服务
  auth-service:
    build: ./apps/auth-service
    container_name: mvp-auth-service
    depends_on:
      - postgres
      - redis
    ports:
      - "8081:8080"
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      JWT_SECRET: mvp-jwt-secret-key-change-in-production
    networks:
      - mvp-net

  # 数据服务
  data-service:
    build: ./apps/data-service
    container_name: mvp-data-service
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8082:8080"
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      KAFKA_SERVERS: kafka:29092
    networks:
      - mvp-net

  # Flink JobManager
  flink-jobmanager:
    image: flink:1.17.1-scala_2.12-java11
    container_name: mvp-flink-jobmanager
    ports:
      - "8083:8081"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    command: jobmanager
    networks:
      - mvp-net

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.17.1-scala_2.12-java11
    container_name: mvp-flink-taskmanager
    depends_on:
      - flink-jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    command: taskmanager
    networks:
      - mvp-net

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  es_data:

networks:
  mvp-net:
    driver: bridge